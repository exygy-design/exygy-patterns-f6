@charset "UTF-8";
@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700,800);
@import url(https://fonts.googleapis.com/css?family=Droid+Serif:400,700,400italic);
@import url(https://fonts.googleapis.com/css?family=Montserrat:400,700);
@import url(//fonts.googleapis.com/css?family=Roboto:400,500,300,100,700,900);
.bg-primary {
  background-color: #00bed5 !important; }

.bg-secondary {
  background-color: #e67e22 !important; }

.bg-attention {
  background-color: #5fb8c5 !important; }

.bg-alert {
  background-color: #e31c3d !important; }

.bg-success {
  background-color: #63c848 !important; }

.bg-warn {
  background-color: #eec134 !important; }

.c-primary {
  color: #00bed5 !important; }

.c-secondary {
  color: #e67e22 !important; }

.c-attention {
  color: #5fb8c5 !important; }

.c-alert {
  color: #e31c3d !important; }

.c-success {
  color: #63c848 !important; }

.c-warn {
  color: #eec134 !important; }

.a-primary {
  color: #00bed5 !important; }

.a-secondary {
  color: #e67e22 !important; }

.a-attention {
  color: #5fb8c5 !important; }

.a-alert {
  color: #e31c3d !important; }

.a-success {
  color: #63c848 !important; }

.a-warn {
  color: #eec134 !important; }

.i-primary svg use {
  fill: #00bed5 !important; }

.i-secondary svg use {
  fill: #e67e22 !important; }

.i-attention svg use {
  fill: #5fb8c5 !important; }

.i-alert svg use {
  fill: #e31c3d !important; }

.i-success svg use {
  fill: #63c848 !important; }

.i-warn svg use {
  fill: #eec134 !important; }

.a-top-right {
  position: absolute;
  top: 0;
  right: 0; }

.a-top-left {
  position: absolute;
  top: 0;
  left: 0; }

.p-relative {
  position: relative; }

.d-block {
  display: block; }

.d-inline {
  display: inline; }

.d-inline-block {
  display: inline-block; }

.a-center {
  display: block;
  margin: 0 auto; }

/*! * [Unit Space](https://github.com/kevinmack18/SASS-Margin-and-Padding-Starter) */
*, *:before, *:after {
  box-sizing: border-box; }

@media screen and (min-width: 960px) {
  .padding, .padding-top {
    padding-top: 16px !important; } }

@media screen and (max-width: 960px) {
  .padding, .padding-top {
    padding-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding, .padding-right {
    padding-right: 16px !important; } }

@media screen and (max-width: 960px) {
  .padding, .padding-right {
    padding-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding, .padding-bottom {
    padding-bottom: 16px !important; } }

@media screen and (max-width: 960px) {
  .padding, .padding-bottom {
    padding-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding, .padding-left {
    padding-left: 16px !important; } }

@media screen and (max-width: 960px) {
  .padding, .padding-left {
    padding-left: 16px !important; } }

@media screen and (min-width: 960px) {
  .spacing {
    padding-top: 32px !important; } }

@media screen and (max-width: 960px) {
  .spacing {
    padding-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .spacing {
    padding-right: 32px !important; } }

@media screen and (max-width: 960px) {
  .spacing {
    padding-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .spacing {
    padding-bottom: 32px !important; } }

@media screen and (max-width: 960px) {
  .spacing {
    padding-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .spacing {
    padding-left: 32px !important; } }

@media screen and (max-width: 960px) {
  .spacing {
    padding-left: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--2x, .padding-top--2x {
    padding-top: 32px !important; } }

@media screen and (max-width: 960px) {
  .padding--2x, .padding-top--2x {
    padding-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--2x, .padding-right--2x {
    padding-right: 32px !important; } }

@media screen and (max-width: 960px) {
  .padding--2x, .padding-right--2x {
    padding-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--2x, .padding-bottom--2x {
    padding-bottom: 32px !important; } }

@media screen and (max-width: 960px) {
  .padding--2x, .padding-bottom--2x {
    padding-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--2x, .padding-left--2x {
    padding-left: 32px !important; } }

@media screen and (max-width: 960px) {
  .padding--2x, .padding-left--2x {
    padding-left: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--3halves, .padding-top--3halves {
    padding-top: 24px !important; } }

@media screen and (max-width: 960px) {
  .padding--3halves, .padding-top--3halves {
    padding-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--3halves, .padding-right--3halves {
    padding-right: 24px !important; } }

@media screen and (max-width: 960px) {
  .padding--3halves, .padding-right--3halves {
    padding-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--3halves, .padding-bottom--3halves {
    padding-bottom: 24px !important; } }

@media screen and (max-width: 960px) {
  .padding--3halves, .padding-bottom--3halves {
    padding-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .padding--3halves, .padding-left--3halves {
    padding-left: 24px !important; } }

@media screen and (max-width: 960px) {
  .padding--3halves, .padding-left--3halves {
    padding-left: 16px !important; } }

.padding--half, .padding-top--half {
  padding-top: 8px !important; }

.padding--half, .padding-right--half {
  padding-right: 8px !important; }

.padding--half, .padding-bottom--half {
  padding-bottom: 8px !important; }

.padding--half, .padding-left--half {
  padding-left: 8px !important; }

@media screen and (min-width: 960px) {
  .margin, .margin-top, .spacing-verticals {
    margin-top: 16px !important; } }

@media screen and (max-width: 960px) {
  .margin, .margin-top, .spacing-verticals {
    margin-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin, .margin-right {
    margin-right: 16px !important; } }

@media screen and (max-width: 960px) {
  .margin, .margin-right {
    margin-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin, .margin-bottom, .spacing-verticals {
    margin-bottom: 16px !important; } }

@media screen and (max-width: 960px) {
  .margin, .margin-bottom, .spacing-verticals {
    margin-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin, .margin-left {
    margin-left: 16px !important; } }

@media screen and (max-width: 960px) {
  .margin, .margin-left {
    margin-left: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--2x, .margin-top--2x {
    margin-top: 32px !important; } }

@media screen and (max-width: 960px) {
  .margin--2x, .margin-top--2x {
    margin-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--2x, .margin-right--2x {
    margin-right: 32px !important; } }

@media screen and (max-width: 960px) {
  .margin--2x, .margin-right--2x {
    margin-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--2x, .margin-bottom--2x {
    margin-bottom: 32px !important; } }

@media screen and (max-width: 960px) {
  .margin--2x, .margin-bottom--2x {
    margin-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--2x, .margin-left--2x {
    margin-left: 32px !important; } }

@media screen and (max-width: 960px) {
  .margin--2x, .margin-left--2x {
    margin-left: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--3halves, .margin-top--3halves {
    margin-top: 24px !important; } }

@media screen and (max-width: 960px) {
  .margin--3halves, .margin-top--3halves {
    margin-top: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--3halves, .margin-right--3halves {
    margin-right: 24px !important; } }

@media screen and (max-width: 960px) {
  .margin--3halves, .margin-right--3halves {
    margin-right: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--3halves, .margin-bottom--3halves {
    margin-bottom: 24px !important; } }

@media screen and (max-width: 960px) {
  .margin--3halves, .margin-bottom--3halves {
    margin-bottom: 16px !important; } }

@media screen and (min-width: 960px) {
  .margin--3halves, .margin-left--3halves {
    margin-left: 24px !important; } }

@media screen and (max-width: 960px) {
  .margin--3halves, .margin-left--3halves {
    margin-left: 16px !important; } }

.margin--half, .margin-top--half {
  margin-top: 8px !important; }

.margin--half, .margin-right--half {
  margin-right: 8px !important; }

.margin--half, .margin-bottom--half {
  margin-bottom: 8px !important; }

.margin--half, .margin-left--half {
  margin-left: 8px !important; }

@media screen and (min-width: 960px) {
  .padding--verticals {
    padding-top: 16px; } }

@media screen and (max-width: 960px) {
  .padding--verticals {
    padding-top: 16px; } }

@media screen and (min-width: 960px) {
  .padding--verticals {
    padding-bottom: 16px; } }

@media screen and (max-width: 960px) {
  .padding--verticals {
    padding-bottom: 16px; } }

@media screen and (min-width: 960px) {
  .padding--verticals {
    padding-left: 16px; } }

@media screen and (max-width: 960px) {
  .padding--verticals {
    padding-left: 16px; } }

.no-padding {
  padding: 0 !important; }

.padding-left-none {
  padding-left: 0 !important; }

.padding-right-none {
  padding-right: 0 !important; }

.no-margin {
  margin: 0 !important; }

.margin-bottom-none {
  margin-bottom: 0 !important; }

.margin-top-none {
  margin-top: 0 !important; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section,
summary {
  display: block; }

audio,
canvas,
video {
  display: inline-block; }

audio:not([controls]) {
  display: none;
  height: 0; }

[hidden] {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Sets default font family to sans-serif.
 * 2. Prevents iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%; }

body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Addresses `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/*
 * Improves readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Addresses `h1` font sizes within `section` and `article` in Firefox 4+,
 * Safari 5, and Chrome.
 */
h1 {
  font-size: 2em; }

/*
 * Addresses styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/*
 * Addresses style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/*
 * Addresses styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/*
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/*
 * Corrects font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/*
 * Improves readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word; }

/*
 * Sets consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/*
 * Addresses inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/*
 * Prevents `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Removes border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/*
 * Corrects overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Addresses margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/*
 * 1. Corrects color not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/*
 * 1. Corrects font family not being inherited in all browsers.
 * 2. Corrects font size not being inherited in all browsers.
 * 3. Addresses margins set differently in Firefox 4+, Safari 5, and Chrome
 */
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0; }

/*
 * Addresses Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Corrects inability to style clickable `input` types in iOS.
 * 3. Improves usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
input[disabled] {
  cursor: default; }

/*
 * 1. Addresses box sizing set to `content-box` in IE 8/9.
 * 2. Removes excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/*
 * 1. Addresses `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Addresses `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }

/*
 * Removes inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/*
 * Removes inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/*
 * 1. Removes default vertical scrollbar in IE 8/9.
 * 2. Improves readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

.footer {
  background-color: #292c2f;
  text-align: center;
  font-size: 1.2rem;
  padding: 4rem; }
  .footer p.slogan {
    color: #8d9093;
    font-size: 1.8rem;
    margin: 0 0 1rem; }
  .footer p.copywrite {
    color: #8f9296;
    font-size: 0.875rem;
    margin: 0; }
  .footer .links a {
    list-style: none;
    font-weight: bold;
    color: #ffffff;
    padding: 3rem 0 2rem;
    margin: 0; }
    .footer .links a::after {
      content: "•";
      padding: 0 0.4rem 0 0.8rem; }
    .footer .links a:last-child::after {
      content: "";
      padding: 0 0.4rem 0 0.8rem; }

select {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background-color: #fff;
  background-image: none, url("../images/arrow-down.svg"), url("../images/arrow-down.png");
  background-position: right .75rem center;
  background-repeat: no-repeat;
  background-size: .75rem; }

label {
  display: block; }

/**
 * Custom checkboxes
 */
input[type="checkbox"],
input[type="radio"] {
  position: absolute;
  left: -999em; }

.ie9 input[type="radio"],
.ie9 input[type="checkbox"] {
  left: 0 !important;
  position: relative !important; }

input[type="checkbox"] + label,
input[type="radio"] + label {
  cursor: pointer;
  font-weight: 400;
  margin-bottom: 0.5em;
  display: block; }

input[type="checkbox"] + label::before,
input[type="radio"] + label::before {
  background: white;
  border-radius: 0.1875rem;
  box-shadow: 0 0 0 1px #757575;
  content: '\a0';
  display: inline-block;
  height: 1.2rem;
  line-height: .8;
  margin-right: .6em;
  text-indent: .15em;
  vertical-align: .2em;
  width: 1.2rem; }

input[type="radio"] + label::before {
  box-shadow: 0 0 0 2px #fff, 0 0 0 3px #757575;
  height: .9rem;
  width: .9rem; }

input[type="radio"] + label::before {
  border-radius: 100%; }

input[type="checkbox"]:checked + label::before,
input[type="radio"]:checked + label::before {
  background-color: #00bed5;
  box-shadow: 0 0 0 1px #00bed5; }

input[type="radio"]:checked + label::before {
  box-shadow: 0 0 0 2px #fff, 0 0 0 4px #00bed5; }

input[type="radio"]:focus + label::before {
  box-shadow: 0 0 0 2px #fff, 0 0 0 4px #00bed5, 0 0 3px 4px #3e94cf, 0 0 7px 4px #3e94cf; }

input[type="checkbox"]:checked + label::before {
  background-image: url("../images/check.png");
  background-image: url("../images/check.svg");
  background-position: 50%;
  background-repeat: no-repeat; }

input[type="checkbox"]:focus + label::before {
  box-shadow: 0 0 0 1px #fff, 0 0 0 3px #00bed5; }

input[type="checkbox"]:disabled + label {
  color: #ccc; }

input[type="checkbox"]:disabled + label::before,
input[type="radio"]:disabled + label::before {
  background: #fff;
  box-shadow: 0 0 0 1px #efefef;
  cursor: not-allowed; }

html, body {
  background: #FAFAFA; }

.card {
  font-family: 'Roboto', sans-serif;
  overflow: hidden;
  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);
  color: #272727;
  border-radius: 2px; }
  .card .title {
    line-height: 3rem;
    font-size: 1.5rem;
    font-weight: 300; }
  .card .content {
    padding: 1.3rem;
    font-weight: 300;
    border-radius: 0 0 2px 2px; }
  .card p {
    margin: 0; }
  .card .action {
    border-top: 1px solid rgba(160, 160, 160, 0.2);
    padding: 1.3rem; }
  .card a {
    color: #ffab40;
    margin-right: 1.3rem;
    -webkit-transition: color 0.3s ease;
            transition: color 0.3s ease;
    text-transform: uppercase;
    text-decoration: none; }
  .card .image {
    position: relative; }
    .card .image .title {
      position: absolute;
      bottom: 0;
      left: 0;
      padding: 1.3rem;
      color: #fff; }
    .card .image img {
      border-radius: 2px 2px 0 0; }

.hero {
  background-color: #324766;
  background-position: top;
  background-repeat: no-repeat;
  background-size: cover;
  padding-bottom: 3em; }
  .hero .hero-logo img {
    height: 4em;
    margin-bottom: 1em; }
  .hero .hero-inner {
    margin: auto;
    padding: 3.5em;
    text-align: center; }
    .hero .hero-inner::before, .hero .hero-inner::after {
      content: ' ';
      display: table; }
    .hero .hero-inner::after {
      clear: both; }
    .hero .hero-inner .hero-copy {
      text-align: center; }
      .hero .hero-inner .hero-copy h1 {
        color: white;
        font-size: 1.6em;
        margin-bottom: 0.5em; }
      .hero .hero-inner .hero-copy p {
        color: white;
        line-height: 1.4em;
        margin: 0 auto 3em auto; }

.log-in-form {
  background-color: #fff;
  border: 1px solid #cacaca;
  padding: 1rem;
  border-radius: 3px; }

/*# sourceMappingURL=data:application/json;base64, */
